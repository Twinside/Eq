#ifndef FORMULA_H
#define FORMULA_H

#include <cmath>

#include "enumOpCode.h"
#include "FormulaNodes.h"

namespace Formula
{
    template <typename Number>
    class FormulaTracedNumber
    {
    public:
        FormulaTracedNumber( Number n );
        FormulaTracedNumber( const char* name, Number n );
        FormulaTracedNumber( const FormulaNode<Number>* name, Number n );
        FormulaTracedNumber( FormulaTracedNumber<Number> *f, Number n );

        ~FormulaTracedNumber();
        FormulaTracedNumber( const FormulaTracedNumber<Number> &cpy );
        
        FormulaNode<Number>*    getFormula() { return formula; }
        const FormulaNode<Number>*    getFormula() const { return formula; }
        Number                  getNumber() const { return number; }

        // definition of all arithmetic numbers, but overloaded.
        // Kept in a separate file because the content is generated
        // by an haskell script.
        #include "FormulaBoileprlateOverloaded.h"

        // NON-trivial operators, written by hand
        FormulaTracedNumber<Number>& operator =( const FormulaTracedNumber<Number> &cpy );

        // increment
        FormulaTracedNumber<Number>& operator ++();
        FormulaTracedNumber<Number>& operator ++( int );

        // decrement
        FormulaTracedNumber<Number>& operator --();
        FormulaTracedNumber<Number>& operator --( int );

        // negation
        FormulaTracedNumber<Number>& operator -() const;

    private:
        FormulaNode<Number> *formula;
        Number              number;
    };
}

#include "FormulaSpceific.inline.h"

// More operatores redevined to cover all cases...
// generated by an haskell script.
#include "FormulaOverloadedOp.h"

// all the operator code... also generated by
// an haskell script
#include "Formula.inline.h"

#endif /* FORMULA_H */

